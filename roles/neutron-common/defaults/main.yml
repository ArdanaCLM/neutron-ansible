#
# (c) Copyright 2015-2017 Hewlett Packard Enterprise Development LP
# (c) Copyright 2017-2018 SUSE LLC
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
---

# Config Processor defined variables

# variables needed for TLS
ca_file: "{{ trusted_ca_bundle }}"

mysql:
  db_ssl: "{% if NEU_SVR.consumes_FND_MDB.vips.private[0].use_tls %}?ssl_ca={{ ca_file }}{% endif %}"
  host: "{{ NEU_SVR.consumes_FND_MDB.vips.private[0].host }}"
  admin_user: "{{ NEU_SVR.consumes_FND_MDB.vars.accounts.neutron.username }}"
  admin_password: "{{ NEU_SVR.consumes_FND_MDB.vars.accounts.neutron.password | quote }}"

keystone:
  admin_project_name: "{{ KEY_API.vars.keystone_admin_tenant }}"
  service_project: "{{ KEY_API.vars.keystone_service_tenant }}"
  neutron_admin_user: "{{ NEU_SVR.consumes_KEY_API.vars.keystone_neutron_user }}"
  neutron_admin_password: "{{ NEU_SVR.consumes_KEY_API.vars.keystone_neutron_password | quote }}"
  auth_uri: "{{ NEU_SVR.consumes_KEY_API.vips.private[0].url }}"
  auth_url: "{{ NEU_SVR.consumes_KEY_API.vips.private[0].url }}"
  endpoint: "{{ NEU_SVR.consumes_KEY_API.vips.private[0].url }}/v3"
  admin_user: "{{ KEY_API.vars.keystone_admin_user }}"
  admin_password: "{{ KEY_API.vars.keystone_admin_pwd | quote }}"
  default_domain_name: "{{ KEY_API.vars.keystone_default_domain }}"
  region_name: "{{ NEU.regions | first }}"

rabbit:
  member: "{{ NEU.consumes_FND_RMQ.members.private }}"
  username: "{{ NEU.consumes_FND_RMQ.vars.accounts.neutron.username }}"
  passwd: "{{ NEU.consumes_FND_RMQ.vars.accounts.neutron.password }}"
  use_ssl: "{{ NEU.consumes_FND_RMQ.members.private[0].use_tlsâ€‚}}"

nova:
  private_host: "{{ NEU_SVR.consumes_NOV_API.vips.private[0].host }}"
  private_port: "{{ NEU_SVR.consumes_NOV_API.vips.private[0].port }}"
  admin_host: "{{ NEU_SVR.consumes_NOV_API.vips.private[0].host }}"
  user: "{{ NOV_API.consumes_KEY_API.vars.keystone_nova_user }}"
  passwd: "{{ NOV_API.consumes_KEY_API.vars.keystone_nova_password | quote }}"
  metadata_ip: "{% if NEU_MDA is defined %}{% if NEU_MDA.consumes_NOV_MTD is defined %}{{ NEU_MDA.consumes_NOV_MTD.vips.private[0].ip_address }}{% else %}{{ NEU_SVR.consumes_NOV_API.vips.private[0].host }}{% endif %}{% endif %}"
  metadata_port: "{% if NEU_MDA is defined %}{% if NEU_MDA.consumes_NOV_MTD is defined %}{{ NEU_MDA.consumes_NOV_MTD.vips.private[0].port }}{% else %}8775{% endif %}{% endif %}"
  metadata_protocol: "{% if NEU_MDA is defined %}{% if NEU_MDA.consumes_NOV_MTD is defined %}{{ NEU_MDA.consumes_NOV_MTD.vips.private[0].protocol }}{% else %}http{% endif %}{% endif %}"
  metadata_proxy_shared_secret: "{%- if NOV_MTD is defined and NOV_MTD.vars.metadata_proxy_shared_secret is defined -%}
                                         {{ NOV_MTD.vars.metadata_proxy_shared_secret }}
                                 {%- endif -%}"
  region_name: "{{ NEU.regions | first }}"

barbican:
 admin_role: "{% if KEYMGR_API is defined and KEYMGR_API.vars.barbican_admin_role is defined %}{{ KEYMGR_API.vars.barbican_admin_role }}{% else %}{{''}}{% endif %}"

neutron_api:
  public_region: "{{ NEU.regions | first }}"
  admin_url: "{{ NEU_SVR.advertises.vips.admin[0].url }}/"
  internal_url: "{{ NEU_SVR.advertises.vips.private[0].url }}/"

octavia_api:
  api_url: "{% if NEU_SVR.consumes_OCT_API is defined and NEU_SVR.consumes_OCT_API.vips is defined %}{{ NEU_SVR.consumes_OCT_API.vips.private[0].url }}{% else %}{{''}}{% endif %}"

multi_tenancy_switch_config: "{{ config_data | item('IRN.multi_tenancy_switch_config', default=[])
                                    if config_data | item('IRN.multi_tenancy_enabled', default=false) else [] }}"

# Other variables

installation_directory: /usr/share
neutron_user: neutron
neutron_group: neutron
neutron_l3_agent_mode: dvr
neutron_ovs_datapath_type: system
neutron_tenant_network_types: "{% set vlan_set = [] %}{% set vxlan_set = [] %}{% set comma = joiner(',') %}
                         {%- if network_tag_values is defined -%}
                            {%- for ntv in network_tag_values -%}
                                {%- for netgroup in network_tag_values[ntv] -%}
                                    {%- if 'neutron.networks.vxlan' in network_tag_values[ntv][netgroup] -%}
                                        {%- if not vxlan_set -%}
                                            {{ comma() }}{{ 'vxlan' }}
                                            {%- if vxlan_set.append(1) -%}{%- endif -%}
                                        {%- endif -%}
                                    {%- endif -%}
                                    {%- if 'neutron.networks.vlan' in network_tag_values[ntv][netgroup] -%}
                                        {%- if not vlan_set -%}
                                            {{ comma() }}{{ 'vlan' }}
                                            {%- if vlan_set.append(1) -%}{%- endif -%}
                                        {%- endif -%}
                                    {%- endif -%}
                                {%- endfor -%}
                            {%- endfor -%}
                        {%- endif -%}"
neutron_vni_ranges: "{{ network_tag_values | _get_vni_ranges }}"
neutron_vlan_ranges: "{{ network_tag_values | _get_vlan_ranges }}"
neutron_flat_networks: "{% set flat_nets = [] %}
                        {%- if network_tag_values is defined -%}
                            {%- if 'neutron' in network_tag_values -%}
                                {%- for netgroup in network_tag_values['neutron'] -%}
                                    {%- if 'neutron.networks.flat' in network_tag_values['neutron'][netgroup] -%}
                                        {%- if network_tag_values['neutron'][netgroup]['neutron.networks.flat'] -%}
                                            {%- if 'provider-physical-network' in network_tag_values['neutron'][netgroup]['neutron.networks.flat'] -%}
                                                {%- do flat_nets.append(network_tag_values['neutron'][netgroup]['neutron.networks.flat']['provider-physical-network']) -%}
                                            {%- endif -%}
                                        {%- endif -%}
                                    {%- endif -%}
                                {%- endfor -%}
                            {%- endif -%}
                        {%- endif -%}
                        {%- for ext_net in config_data | item('NEU.neutron_external_networks', default=[]) -%}
                            {%- for provider in ext_net | item('provider', default=[]) -%}
                                {%- set nt = [provider | item('network_type', default='')] -%}
                                {%- if 'flat' in nt -%}
                                    {%- if provider.physical_network is defined -%}
                                        {%- do flat_nets.append(provider.physical_network) -%}
                                    {%- endif -%}
                                {%- endif -%}
                            {%- endfor -%}
                        {%- endfor -%}
                        {{ flat_nets | unique | join(',') }}"
neutron_db_connection: "mysql+pymysql://{{ mysql.admin_user }}:{{ mysql.admin_password | urlencode }}@{{ mysql.host }}/ovs_neutron{{ mysql.db_ssl }}"
neutron_bridge_mappings: "{% set temp_list = [] %}
                            {%- if host.my_network_tags is defined -%}
                                {%- for network_tag in host.my_network_tags -%}
                                    {%- if network_tag.bridge_port is defined -%}
                                        {%- for tag in network_tag.tags -%}
                                            {%- if tag.tag == 'neutron.networks.flat' or tag.tag == 'neutron.networks.vlan' -%}
                                                {%- if tag.data_values -%}
                                                    {%- if 'provider-physical-network' in tag.data_values -%}
                                                        {%- set mapping = tag.data_values['provider-physical-network']+':'+network_tag.device -%}
                                                        {%- if temp_list.append( mapping ) -%}{%- endif -%}
                                                    {%- endif -%}
                                                {%- endif -%}
                                            {%- endif -%}
                                        {%- endfor -%}
                                    {%- endif -%}
                                {%- endfor -%}
                            {%- endif -%}
                            {{ temp_list|unique|join(',')}}"
neutron_local_ip: "{%- if host.my_network_tags is defined -%}
                       {%- for network_tag in host.my_network_tags -%}
                           {%- for tag in network_tag.tags -%}
                               {%- if tag.tag == 'neutron.networks.vxlan' -%}
                                   local_ip = {{ network_tag.address }}
                               {%- endif -%}
                           {%- endfor -%}
                       {%- endfor -%}
                   {%- endif -%}"
neutron_tunnel_types: "{%- if network_tag_values is defined -%}
                           {%- if 'neutron' in network_tag_values -%}
                               {%- for netgroup in network_tag_values['neutron'] -%}
                                   {%- if 'neutron.networks.vxlan' in network_tag_values['neutron'][netgroup] -%}
                                       {{ 'vxlan' }}
                                   {%- endif -%}
                               {%- endfor -%}
                           {%- endif -%}
                       {%- endif -%}"
keystone_admin_project_name: "{{ keystone.service_project }}"
neutron_nova_metadata_ip: "{{ nova.metadata_ip }}"
neutron_nova_metadata_port: "{{ nova.metadata_port }}"
neutron_nova_metadata_protocol: "{{ nova.metadata_protocol }}"
neutron_nova_region_name: "{{ nova.region_name }}"
neutron_log_dir: /var/log/neutron
neutron_common_rundir: /var/run/neutron
router_distributed: "{% if false in NEU_SVR | get_provided_data_values('router_distributed') %}False{% else %}True{% endif %}"
neutron_l3_ha: "{% if true in NEU_SVR | get_provided_data_values('neutron_l3_ha') %}True{% else %}False{% endif %}"

# vmware vcenter specific attributes
vcenter_cluster_dvs_mapping: "{% if host.pass_through.vmware is defined %}{% if host.pass_through.vmware.cluster_dvs_mapping is defined %}{{ host.pass_through.vmware.cluster_dvs_mapping }} {% else %}no_mapping{% endif %}{% endif %}"
vcenter_esx_hostname: "{% if host.pass_through.vmware is defined %}{% if host.pass_through.vmware.esx_hostname is defined %}{{ host.pass_through.vmware.esx_hostname }} {% else %}hostname{% endif %}{% endif %}"
vcenter_id: "{% if host.pass_through.vmware is defined %}{{ host.pass_through.vmware.vcenter_id }}{% else %}vcenter_id{% endif %}"
vcenter_encrypted_password: "{%- if global.pass_through is defined -%}
                              {%- if global.pass_through.vmware is defined -%}
                                {%- for vc in global.pass_through.vmware -%}
                                     {%- if vc.id == host.pass_through.vmware.vcenter_id -%}
                                        {{ vc.password }}
                                     {%- endif -%}
                                {%- endfor -%}
                               {%- endif -%}
                             {%- endif -%}"

# OVSvApp specific attributes
enable_l2_population: "{% if false in NEU_ML2 | get_provided_data_values('l2_population') %}False{% else %}True{% endif %}"
enable_distributed_routing: "{% if false in NEU_ML2 | get_provided_data_values('enable_distributed_routing') %}False{% else %}True{% endif %}"
ovsvapp_bridge_mappings: "{{ neutron_bridge_mappings }}"
ovsvapp_security_bridge_mapping: "{%- if host.my_network_tags is defined -%}
                                      {%- for network_tag in host.my_network_tags -%}
                                          {%- if network_tag.tags is defined -%}
                                              {%- for tag in network_tag.tags -%}
                                                  {%- if tag.tag is defined -%}
                                                      {%- if tag.tag == 'neutron.ovsvapp.sec_bridge_if' -%}
                                                          {{ network_tag.device }}:{{ network_tag.bridge_port }}
                                                      {%- endif -%}
                                                  {%- endif -%}
                                              {%- endfor -%}
                                          {%- endif -%}
                                      {%- endfor -%}
                                  {%- endif -%}"
ovsvapp_mgmt_device: "{%- if host.my_network_tags is defined -%}
                          {%- for network_tag in host.my_network_tags -%}
                              {%- if network_tag.tags is defined -%}
                                  {%- for tag in network_tag.tags -%}
                                      {%- if tag.tag is defined -%}
                                          {%- if tag.tag == 'neutron.ovsvapp.management_if' -%}
                                              {{ network_tag.device }}
                                          {%- endif -%}
                                      {%- endif -%}
                                  {%- endfor -%}
                              {%- endif -%}
                          {%- endfor -%}
                      {%- endif -%}"
vlan_tag_present: "{%- if host.my_network_tags is defined -%}
                       {%- for network_tag in host.my_network_tags -%}
                           {%- if network_tag.tags is defined -%}
                               {%- for tag in network_tag.tags -%}
                                   {%- if tag.tag is defined -%}
                                       {%- if tag.tag == 'neutron.networks.vlan' -%}
                                           {{ 'True' }}
                                       {%- endif -%}
                                   {%- endif -%}
                               {%- endfor -%}
                           {%- endif -%}
                       {%- endfor -%}
                   {%- endif -%}"
ovsvapp_mgmt_subnet: "{%- if vlan_tag_present == 'True' and ovs_bridge_interfaces is defined -%}
                          {%- for bridge_interface in ovs_bridge_interfaces -%}
                              {%- if bridge_interface.routing_table is defined -%}
                                  {%- if bridge_interface.cidr is defined -%}
                                      {%- if bridge_interface.device == ovsvapp_mgmt_device -%}
                                          {{ bridge_interface.cidr }}
                                      {%- endif -%}
                                  {%- endif -%}
                              {%- endif -%}
                          {%- endfor -%}
                      {%- else -%}
                          {%- if ovsvapp_mgmt_device | search('vlan') and network_vlan_interfaces is defined -%}
                              {%- for vlan_interface in network_vlan_interfaces -%}
                                  {%- if vlan_interface.routing_table is defined -%}
                                      {%- if vlan_interface.cidr is defined -%}
                                          {%- if vlan_interface.device == ovsvapp_mgmt_device -%}
                                              {{ vlan_interface.cidr }}
                                          {%- endif -%}
                                      {%- endif -%}
                                  {%- endif -%}
                              {%- endfor -%}
                          {%- else -%}
                              {%- if network_ether_interfaces is defined -%}
                                  {%- for eth_interface in network_ether_interfaces -%}
                                      {%- if eth_interface.routing_table is defined -%}
                                          {%- if eth_interface.cidr is defined -%}
                                              {%- if eth_interface.device == ovsvapp_mgmt_device -%}
                                                  {{ eth_interface.cidr }}
                                              {%- endif -%}
                                          {%- endif -%}
                                      {%- endif -%}
                                  {%- endfor -%}
                              {%- endif -%}
                          {%- endif -%}
                      {%- endif -%}"
ovsvapp_network_types: "{% set temp = [] %}
                           {%- if host is defined -%}
                               {%- if host.my_network_tags is defined -%}
                                   {%- for tag in host.my_network_tags -%}
                                       {%- if tag.tags is defined -%}
                                           {%- for item in tag.tags -%}
                                               {%- if item.tag is defined -%}
                                                   {%- if item.tag == 'neutron.networks.vxlan' -%}
                                                       {%- if temp.append('vxlan') -%}{%- endif -%}
                                                   {%- endif -%}
                                                   {%- if item.tag == 'neutron.networks.vlan' -%}
                                                       {%- if temp.append('vlan') -%}{%- endif -%}
                                                   {%- endif -%}
                                               {%- endif -%}
                                           {%- endfor -%}
                                       {%- endif -%}
                                   {%- endfor -%}
                               {%- endif -%}
                           {%- endif -%}
                        {{ temp | unique | join(',') }}"

neutron_core_plugin: >
    {{ NEU_SVR | get_provided_data_values('core_plugin', default=['']) | last }}

neutron_service_plugins: >
    {{ NEU_SVR | get_provided_data_values('service_plugins') | unique | join(',') }}

default_policy_json: 'roles/neutron-common/templates/policy.json.j2'
neutron_server_std_policy_json_j2: "
   {%- set spjj_list = NEU_SVR | get_provided_data_values('std_policy_json_j2') -%}
   {%- do spjj_list.append(default_policy_json) -%}
   {{ spjj_list | unique | first }}"

neutron_server_policy_json: >
    {{ NEU_SVR | get_provided_data_values('policy_json') | unique }}

neutron_server_config_files: >
    {{ NEU_SVR | get_provided_data_values('config_files') | unique }}

neutron_server_config_dests: >
    {{ neutron_server_config_files | map(attribute='dest') | list }}

ml2_conf_ini_in_list: >
    {%- if 'ml2_conf.ini' in neutron_server_config_dests -%}
        True
    {%- else -%}
        False
    {%- endif -%}

neutron_api_extensions_path: >
    {%- set aep_list = NEU_SVR | get_provided_data_values('api_extensions_path') -%}
    {%- if aep_list|length > 0 -%}
        api_extensions_path = {{ aep_list | unique | join(',') }}
    {%- endif -%}

neutron_conf_snippets: >
    {{ NEU_SVR | get_provided_data_values('config_file_snippets') | unique | selectattr('config_file', 'equalto', 'neutron.conf') | map(attribute='snippet') | list }}


ml2_extension_drivers: >
    {%- set ed_list = NEU_ML2 | get_provided_data_values('extension_drivers') -%}
    {%- if ed_list|length > 0 -%}
        extension_drivers = {{ ed_list | unique | join(',') }}
    {%- endif -%}

ml2_mechanism_drivers: >
    {%- set md_list = [] -%}
    {%- if enable_l2_population|bool == True -%}
        {% if md_list.append('l2population') %}{%- endif -%}
    {%- endif -%}
    {%- do md_list.extend(multi_tenancy_switch_config | map(attribute='driver_type') | unique) -%}
    {%- do md_list.extend(NEU_ML2 | get_provided_data_values('mechanism_drivers')) -%}
    {{ md_list | unique | join(',') }}

ml2_conf_snippets: >
    {{ NEU_ML2 | get_provided_data_values('config_file_snippets') | unique | selectattr('config_file', 'equalto', 'ml2_conf.ini') | map(attribute='snippet') |  list }}

# AGENT.extensions parameter in ml2_conf.ini.
# Currently only applicable when the OVS agent is used.
ovs_agent_extensions: >
    {%- set exts = NEU_OVS | get_provided_data_values('agent_extensions') -%}
    {%- if exts|length > 0 -%}
        extensions = {{ exts | unique | join(',') }}
    {%- endif -%}

# Auditing variables
neutron_audit_enabled: "{{ NEU.audit.enabled }}"
neutron_audit_logging_dir: "{{ NEU.audit.dir }}/neutron"
neutron_audit_log_file: "{{ neutron_audit_logging_dir }}/neutron-audit.log"
neutron_centralized_log_group: adm

# neutron-l3-agent
## [DEFAULT]


# neutron-dhcp-agent
## [DEFAULT]
neutron_enable_isolated_metadata: "True"
default_dhcp_driver: "neutron.agent.linux.dhcp.Dnsmasq"
neutron_dhcp_driver: "
    {%  set dd_list = NEU_DHCP | get_provided_data_values('dhcp_driver') %}
    {%- do dd_list.append(default_dhcp_driver) -%}
    {{ dd_list | first }}"

# neutron-l2gw-agent
## [ovsdb]
neutron_l2gw_ovsdb_hosts: ""

# Set this variable to "external" if start
# of neutron-l2gateway-agent is to be delayed.
# i.e., if this variable is set to "external",
# then neutron-l2gateway-agent will not be
# started as part of neutron-start.yml playbook.
# This handles a case where external applications
# outside Ardana want to delay start of
# neutron-l2gateway-agent.
l2gw_playbook_caller: ""

# neutron.conf
## [DEFAULT]

neutron_max_workers: 10
neutron_api_workers: "{{ ansible_processor_count * ansible_processor_cores * 2 | default('{{ neutron_max_workers }}') }}"
neutron_rpc_workers: "{{ ansible_processor_count * ansible_processor_cores * 2 | default('{{ neutron_max_workers }}') }}"
neutron_metadata_workers: "{{ ansible_processor_count * ansible_processor_cores * 2 | default('{{ neutron_max_workers }}') }}"

### API
neutron_bind_host: "{% if host.bind.NEU_SVR is defined %}{{ host.bind.NEU_SVR.internal.ip_address }}{% endif %}"
neutron_bind_port: "{% if host.bind.NEU_SVR is defined %}{{ host.bind.NEU_SVR.internal.port }}{% else %}9696{% endif %}"

### Nova
neutron_nova_url: "{{ NEU_SVR.consumes_NOV_API.vips.private[0].url }}/v2"
neutron_nova_admin_username: "{{ nova.user }}"
neutron_nova_admin_project_name: "{{ keystone.service_project }}"
neutron_nova_admin_password: "{{ nova.passwd }}"
neutron_nova_admin_auth_url: "{{ NEU_SVR.consumes_KEY_API.vips.private[0].url }}/v3"

### RabbitMQ
neutron_rpc_backend: "rabbit"
neutron_rabbit_username: "{{ rabbit.username }}"
neutron_rabbit_password: "{{ rabbit.passwd }}"
neutron_rabbit_hosts: >-
  {%- set rmq_hosts = [] -%}
  {%- set cred = [neutron_rabbit_username, neutron_rabbit_password] -%}
  {%- for x in NEU | item('consumes_FND_RMQ.members.private', default=[]) -%}
     {%- set v = [x | item('host', default=' '), x | item('port', default=' ')] -%}
     {%- set w = [cred | join(':'), v | join(':') ] -%}
     {%- do rmq_hosts.append(w | join('@')) -%}
  {%- endfor -%}
  {{ rmq_hosts | join(',') }}
neutron_rabbit_use_ssl:  "{{ rabbit.use_ssl }}"
neutron_transport_url: "{{ neutron_rpc_backend }}://{{ neutron_rabbit_hosts }}/"

## [AGENT]
neutron_use_helper_for_ns_read: "False"

### [Octavia]
octavia_api_uri: "{{ octavia_api.api_url }}"

neutron_lbaas_providers: "{%- if verb_hosts.OCT_API is defined -%}
                                  {{ 'service_provider = LOADBALANCERV2:Octavia:neutron_lbaas.drivers.octavia.driver.OctaviaDriver:default' }}
                                  {%- if verb_hosts.NEU_LBAV2 is defined -%}
                                          {{'\n'}}{{ 'service_provider = LOADBALANCERV2:Haproxy:neutron_lbaas.drivers.haproxy.plugin_driver.HaproxyOnHostPluginDriver' }}
                                  {%- elif verb_hosts.NEU_LBAV1 is defined -%}
                                          {{'\n'}}{{ 'service_provider = LOADBALANCER:Haproxy:neutron.services.loadbalancer.drivers.haproxy.plugin_driver.HaproxyOnHostPluginDriver' }}
                                  {%- endif -%}
                          {%- elif verb_hosts.NEU_LBAV2 is defined -%}
                                  {{ 'service_provider = LOADBALANCERV2:Haproxy:neutron_lbaas.drivers.haproxy.plugin_driver.HaproxyOnHostPluginDriver:default' }}
                          {%- elif verb_hosts.NEU_LBAV1 is defined -%}
                                  {{ 'service_provider = LOADBALANCER:Haproxy:neutron.services.loadbalancer.drivers.haproxy.plugin_driver.HaproxyOnHostPluginDriver:default' }}
                          {%- else -%}{{ '' }}{%- endif -%}"

neutron_lbaas_plugin: "{%- if verb_hosts.OCT_API is defined or verb_hosts.NEU_LBAV2 is defined -%}
                                  {{ 'neutron_lbaas.services.loadbalancer.plugin.LoadBalancerPluginv2,' }}
                       {%- elif verb_hosts.NEU_LBAV1 is defined -%}
                                  {{ 'neutron.services.loadbalancer.plugin.LoadBalancerPlugin,' }}
                       {%- else -%}{{ '' }}{%- endif -%}"

## [keystone_authtoken]
neutron_auth_uri: "{{ keystone.auth_uri }}"
neutron_auth_url: "{{ keystone.auth_url }}"
neutron_admin_project_name: "{{ keystone.service_project }}"
neutron_project_domain_name: "{{ keystone.default_domain_name }}"
neutron_user_domain_name: "{{ keystone.default_domain_name }}"
neutron_admin_user: "{{ keystone.neutron_admin_user }}"
neutron_admin_password: "{{ keystone.neutron_admin_password }}"
neutron_keystone_region_name: "{{ keystone.region_name }}"
neutron_cacert_file: "{{ ca_file }}"
memcached_servers: "{% for x in NEU.consumes_FND_MEM.members.private %}{{ x.host }}:{{ x.port }}{%if
 not loop.last %},{% endif %}{% endfor %}"
memcache_secret_key: "{{ NEU.consumes_FND_MEM.vars.memcached.neutron.secret_key | quote }}"

## variables needed by _write_conf.yml
write_conf_file_owner: "{{ neutron_user }}"
write_conf_file_group: "{{ neutron_group }}"

## variables needed to load kernel modules
file_marker: '# ARDANA-MANAGED - Managed by Ardana - Do not edit'
neutron_kernel_module_file: /etc/modules-load.d/ardana_neutron-modules.conf

monasca_agent_plugin_args: ""

monasca_agent_service_name: "{%- if  deployer_media_legacy_layout|bool -%}
                                monasca-agent
                             {%- else -%}
                                openstack-monasca-agent
                             {%- endif -%}"

## variables needed for PCI
sriov_mech_driver: ''
phys_dev_mappings: ''

## Variables needed to dynamically build command lines
config_file_option: ''

ml2_conf_write_result: false


qos_who: "{%- if not (config_data | item('NEU.qos_trusted', default=false)) -%}
             admin_only
          {%- else -%}
             regular_user
          {%- endif -%}"

# DNS related variables
neutron_external_dns_driver: >-
    {%- set ext_dns_driver_list = NEU_SVR | get_provided_data_values('external_dns_driver') -%}
    {%- if ext_dns_driver_list|length > 0 -%}
        external_dns_driver = {{ ext_dns_driver_list | last }}
    {%- endif -%}
dns_domain: "{{ config_data | item('DES.dns_domain', default='openstacklocal') }}"

ovs_ssh_poll_delay: 2
ovs_ssh_timeout: 60
ovs_ssh_connect_timeout: 5
